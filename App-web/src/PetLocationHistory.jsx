// src/utils/PetLocationHistory.js
import { rtdb } from "./firebase";
import { ref, get, update, onValue, set , remove } from "firebase/database";
import { filterPetsByAllSafezones } from "./ChackLocation";
const lastSaveTimes = new Map(); 

// ‡πÄ‡∏Å‡πá‡∏ö listeners ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ cleanup
const activeListeners = new Map();

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
 */
export const savePetLocationHistory = async (deviceId, currentData, safezones = []) => {
  if (!deviceId || !currentData) return false;
  
  try {
    const { latitude, longitude, battery, date, time } = currentData;
    
    //‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    const now = Date.now();
    let timestamp = now;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ timestamp ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const historyRef = ref(rtdb, `lora_data/${deviceId}/history`);
    const existingSnapshot = await get(ref(rtdb, `lora_data/${deviceId}/history/${timestamp}`));
    
    // ‡∏ñ‡πâ‡∏≤ timestamp ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 1 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    while (existingSnapshot.exists()) {
      timestamp += 1;
      const nextCheck = await get(ref(rtdb, `lora_data/${deviceId}/history/${timestamp}`));
      if (!nextCheck.exists()) break;
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const lat = parseFloat(latitude) || 0;
    const lng = parseFloat(longitude) || 0;
    const batteryLevel = parseInt(battery) || 0;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Safe Zone ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let inSafeZone = false;
    if (safezones && safezones.length > 0) {
      const petMock = [{ id: deviceId, lat, lng }];
      const { inside } = filterPetsByAllSafezones(petMock, safezones);
      inSafeZone = inside.length > 0;
    }
    
    const historyRecord = {
      latitude: lat,
      longitude: lng,
      battery: batteryLevel,
      date: date || new Date(timestamp).toISOString().split('T')[0],
      time: time || new Date(timestamp).toTimeString().split(' ')[0],
      timestamp,
      inSafeZone,
      saved_at: new Date(timestamp).toISOString() //‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á
    };
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô path: lora_data/{deviceId}/history/{timestamp}
    const recordRef = ref(rtdb, `lora_data/${deviceId}/history/${timestamp}`);
    await set(recordRef, historyRecord);
    
    console.log(`‚úÖ History saved for ${deviceId} at ${timestamp}:`, historyRecord);
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 records ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    await limitHistoryRecords(deviceId, 50);
    
    return true;
  } catch (error) {
    console.error("‚ùå Error saving pet history:", error);
    return false;
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå
 */
export const getPetLocationHistory = async (deviceId, limit = 20) => {
  if (!deviceId) return [];
  
  try {
    const historyRef = ref(rtdb, `lora_data/${deviceId}/history`);
    const snapshot = await get(historyRef);
    
    if (!snapshot.exists()) {
      console.log(`No history found for device: ${deviceId}`);
      return [];
    }
    
    const data = snapshot.val();
    const historyArray = Object.entries(data)
      .map(([key, record]) => ({
        id: key,
        timestamp: new Date(Number(key)),
        datetime: new Date(Number(key)).toLocaleString('th-TH'),
        ...record
      }))
      .sort((a, b) => b.timestamp - a.timestamp) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      .slice(0, limit); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    
    console.log(`Retrieved ${historyArray.length} history records for ${deviceId}`);
    return historyArray;
    
  } catch (error) {
    console.error("Error fetching pet history:", error);
    return [];
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á device
 */
export const getCurrentDeviceData = async (deviceId) => {
  if (!deviceId) return null;
  
  try {
    const deviceRef = ref(rtdb, `lora_data/${deviceId}`);
    const snapshot = await get(deviceRef);
    
    if (snapshot.exists()) {
      const data = snapshot.val();
      const { history, ...currentData } = data;
      return {
        ...currentData,
        historyCount: history ? Object.keys(history).length : 0
      };
    }
    
    return null;
  } catch (error) {
    console.error("Error getting current device data:", error);
    return null;
  }
};

/**
 * Subscribe ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LoRa ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
 */
export const subscribePetLocationUpdates = (deviceId, safezones = []) => {
  if (!deviceId) return () => {};
  
  // ‡∏´‡∏¢‡∏∏‡∏î listener ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (activeListeners.has(deviceId)) {
    const oldUnsubscribe = activeListeners.get(deviceId);
    oldUnsubscribe();
  }
  
  const deviceRef = ref(rtdb, `lora_data/${deviceId}`);
  let lastDataSnapshot = null;
  let isFirstLoad = true; // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å

  const SAVE_INTERVAL = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  const unsubscribe = onValue(deviceRef, async (snapshot) => {
    if (!snapshot.exists()) return;
    
    const currentData = snapshot.val();
    const { history, ...dataWithoutHistory } = currentData;
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    if (isFirstLoad) {
      lastDataSnapshot = { ...dataWithoutHistory };
      isFirstLoad = false;
      console.log(`Initial data loaded for ${deviceId}, not saving to history`);
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasChanged = hasDataChanged(lastDataSnapshot, dataWithoutHistory);
    
    if (!hasChanged) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
      return;
    }
    
    //  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastDataSnapshot ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    console.log(`Data changed for ${deviceId}:`, {
      old: lastDataSnapshot,
      new: dataWithoutHistory
    });
    lastDataSnapshot = { ...dataWithoutHistory };
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const lastSaveTime = lastSaveTimes.get(deviceId) || 0;
    const now = Date.now();
    
    if (now - lastSaveTime >= SAVE_INTERVAL) {
      console.log(`Saving history for ${deviceId} - data changed and interval met`);
      const success = await savePetLocationHistory(deviceId, dataWithoutHistory, safezones);
      if (success) {
        lastSaveTimes.set(deviceId, now);
      }
    } else {
      const remainingTime = Math.ceil((SAVE_INTERVAL - (now - lastSaveTime)) / 1000);
      console.log(`Data changed for ${deviceId}, but waiting ${remainingTime}s before next save`);
    }
  });
  
  // ‡πÄ‡∏Å‡πá‡∏ö listener ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ cleanup
  activeListeners.set(deviceId, unsubscribe);
  
  console.log(`Started listening to updates for device: ${deviceId}`);
  return unsubscribe;
};

/**
 * Subscribe ‡∏´‡∏•‡∏≤‡∏¢ devices ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
 */
export const subscribeMultiplePetLocationUpdates = (deviceIds, safezones = []) => {
  const unsubscribers = deviceIds.map(deviceId => 
    subscribePetLocationUpdates(deviceId, safezones)
  );
  
  return () => {
    unsubscribers.forEach(unsubscribe => unsubscribe());
    console.log(`üõë Stopped listening to ${deviceIds.length} devices`);
  };
};

/**
 * ‡∏´‡∏¢‡∏∏‡∏î subscribe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö device ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
 */
export const unsubscribePetLocationUpdates = (deviceId) => {
  if (activeListeners.has(deviceId)) {
    const unsubscribe = activeListeners.get(deviceId);
    unsubscribe();
    activeListeners.delete(deviceId);
    console.log(`üõë Stopped listening to device: ${deviceId}`);
  }
};

/**
 * ‡∏´‡∏¢‡∏∏‡∏î subscribe ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const unsubscribeAllPetLocationUpdates = () => {
  activeListeners.forEach((unsubscribe, deviceId) => {
    unsubscribe();
    console.log(`üõë Stopped listening to device: ${deviceId}`);
  });
  activeListeners.clear();
  console.log('üõë All listeners stopped');
};

/**
 * ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
 */
const limitHistoryRecords = async (deviceId, maxRecords = 50) => {
  try {
    const historyRef = ref(rtdb, `lora_data/${deviceId}/history`);
    const snapshot = await get(historyRef);
    
    if (!snapshot.exists()) return;
    
    const history = snapshot.val();
    const entries = Object.entries(history);
    
    if (entries.length <= maxRecords) return;
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ maxRecords
    entries.sort((a, b) => parseInt(b[0]) - parseInt(a[0]));
    const limitedEntries = entries.slice(0, maxRecords);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà
    const limitedHistory = {};
    limitedEntries.forEach(([timestamp, data]) => {
      limitedHistory[timestamp] = data;
    });
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Firebase
    await set(historyRef, limitedHistory);
    
    const deletedCount = entries.length - maxRecords;
    console.log(`Cleaned ${deletedCount} old records for ${deviceId}`);
    
  } catch (error) {
    console.error("Error limiting history records:", error);
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
 */
const hasDataChanged = (oldData, newData) => {
  if (!oldData || !newData) return true; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  
  // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const oldLat = parseFloat(oldData.latitude) || 0;
  const newLat = parseFloat(newData.latitude) || 0;
  const oldLng = parseFloat(oldData.longitude) || 0;
  const newLng = parseFloat(newData.longitude) || 0;
  const oldBattery = parseInt(oldData.battery) || 0;
  const newBattery = parseInt(newData.battery) || 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 6 ‡∏´‡∏•‡∏±‡∏Å)
  const latChanged = Math.abs(oldLat - newLat) > 0.000001;
  const lngChanged = Math.abs(oldLng - newLng) > 0.000001;
  const batteryChanged = oldBattery !== newBattery;
  const dateChanged = oldData.date !== newData.date;
  const timeChanged = oldData.time !== newData.time;
  
  const isChanged = latChanged || lngChanged || batteryChanged || dateChanged || timeChanged;
  
  if (isChanged) {
    console.log(`Data change detected:`, {
      latitude: latChanged ? `${oldLat} ‚Üí ${newLat}` : 'unchanged',
      longitude: lngChanged ? `${oldLng} ‚Üí ${newLng}` : 'unchanged',
      battery: batteryChanged ? `${oldBattery} ‚Üí ${newBattery}` : 'unchanged',
      date: dateChanged ? `${oldData.date} ‚Üí ${newData.date}` : 'unchanged',
      time: timeChanged ? `${oldData.time} ‚Üí ${newData.time}` : 'unchanged'
    });
  }
  
  return isChanged;
};

/**
 * ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Å‡πà‡∏≤
 */
export const cleanAllHistory = async (deviceId) => {
  try {
    const historyRef = ref(rtdb, `lora_data/${deviceId}/history`);
    
    await remove(historyRef); //‡∏•‡∏ö node ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    console.log(`‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ${deviceId} ‡πÅ‡∏•‡πâ‡∏ß`);
    return true;
  } catch (error) {
    console.error("Error cleaning history:", error);
    return false;
  }
};

